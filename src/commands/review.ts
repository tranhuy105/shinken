import {
    ColorResolvable,
    EmbedBuilder,
    Message,
} from "discord.js";
import quizManagerInstance from "../core/quiz/quizManagerInstance";
import {
    QuizMode,
    QuizOptions,
    StudyMode,
} from "../core/quiz/QuizTypes";
import reviewManagerInstance from "../core/quiz/reviewManagerInstance";
import { getLogger } from "../utils/logger";

const logger = getLogger("ReviewCommand");

export const data = {
    name: "review",
    aliases: ["rv", "r"],
    description:
        "Review vocabulary items you've previously struggled with",
};

/**
 * Execute the review command
 * @param message Discord message
 * @param args Command arguments
 */
export async function execute(
    message: Message,
    args: string[]
): Promise<void> {
    const userId = message.author.id;

    // Parse options from args
    const options = parseReviewOptions(args);

    // Check for clear command
    if (options.clear) {
        return await handleClearReview(message, userId);
    }

    // Check for list command
    if (options.list) {
        return await handleListReview(message, userId);
    }

    // Check for remove command
    if (options.remove && options.remove.length > 0) {
        return await handleRemoveReviewItems(
            message,
            userId,
            options.remove
        );
    }

    // Check if user has any review items
    if (!reviewManagerInstance.hasReviewItems(userId)) {
        const errorEmbed = new EmbedBuilder()
            .setColor("#ff9900" as ColorResolvable)
            .setTitle("‚ö†Ô∏è Kh√¥ng c√≥ m·ª•c ƒë·ªÉ √¥n t·∫≠p")
            .setDescription(
                "B·∫°n ch∆∞a c√≥ t·ª´ v·ª±ng n√†o trong danh s√°ch √¥n t·∫≠p. T·ª´ v·ª±ng s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c th√™m v√†o khi b·∫°n tr·∫£ l·ªùi sai trong c√°c phi√™n h·ªçc.\n\n" +
                    "H√£y th·ª≠ l·∫°i sau khi b·∫°n ƒë√£ ho√†n th√†nh m·ªôt v√†i phi√™n h·ªçc.\n\n" +
                    "B·∫°n c≈©ng c√≥ th·ªÉ d√πng `s!q` ƒë·ªÉ b·∫Øt ƒë·∫ßu m·ªôt phi√™n h·ªçc m·ªõi.\n\n" +
                    "L∆∞u √Ω: Ch·ªâ h·ªó tr·ª£ add t·ª´ v·ª±ng ·ªü mode 1 (regconition)"
            )
            .setFooter({
                text: "Shinken Japanese Learning Bot | s!q ƒë·ªÉ b·∫Øt ƒë·∫ßu h·ªçc",
            });

        await message.reply({ embeds: [errorEmbed] });
        return;
    }

    // Get review items
    const reviewItems =
        reviewManagerInstance.getReviewItems(userId);

    // Start a quiz session with these items
    try {
        // Create temporary deck name
        const tempDeckName = `review_${userId}`;

        // Set up quiz options
        const quizOptions: QuizOptions = {
            deckName: tempDeckName,
            mode: options.mode || QuizMode.Reading,
            studyMode:
                options.studyMode || StudyMode.Spaced,
            range: "all",
            timeoutSeconds: options.timeoutSeconds || 20,
        };

        logger.info(
            `Starting review session for user ${userId} with ${reviewItems.length} items`
        );

        // Create temp deck in memory with review items
        await quizManagerInstance.startSessionWithItems(
            message,
            quizOptions,
            reviewItems
        );
    } catch (error) {
        logger.error(
            `Error starting review session for user ${userId}:`,
            error
        );

        const errorEmbed = new EmbedBuilder()
            .setColor("#ff0000" as ColorResolvable)
            .setTitle("‚ùå L·ªói")
            .setDescription(
                "ƒê√£ x·∫£y ra l·ªói khi kh·ªüi ƒë·ªông phi√™n √¥n t·∫≠p. Vui l√≤ng th·ª≠ l·∫°i sau.\n\n" +
                    `L·ªói: ${(error as Error).message}`
            )
            .setFooter({
                text: "Shinken Japanese Learning Bot",
            });

        await message.reply({ embeds: [errorEmbed] });
    }
}

/**
 * Handle removing specific review items by index
 */
async function handleRemoveReviewItems(
    message: Message,
    userId: string,
    indices: number[]
): Promise<void> {
    const items =
        reviewManagerInstance.getReviewItems(userId);

    if (!items.length) {
        const embed = new EmbedBuilder()
            .setColor("#ff9900" as ColorResolvable)
            .setTitle("‚ö†Ô∏è Kh√¥ng c√≥ m·ª•c ƒë·ªÉ x√≥a")
            .setDescription(
                "B·∫°n ch∆∞a c√≥ t·ª´ v·ª±ng n√†o trong danh s√°ch √¥n t·∫≠p."
            )
            .setFooter({
                text: "Shinken Japanese Learning Bot",
            });

        await message.reply({ embeds: [embed] });
        return;
    }

    // Sort indices in descending order to avoid shifting issues when removing
    const validIndices = indices
        .filter(
            (index) => index > 0 && index <= items.length
        )
        .sort((a, b) => b - a);

    if (!validIndices.length) {
        const embed = new EmbedBuilder()
            .setColor("#ff9900" as ColorResolvable)
            .setTitle("‚ö†Ô∏è Ch·ªâ s·ªë kh√¥ng h·ª£p l·ªá")
            .setDescription(
                `Kh√¥ng t√¨m th·∫•y m·ª•c n√†o v·ªõi ch·ªâ s·ªë ƒë√£ cung c·∫•p. Danh s√°ch √¥n t·∫≠p c√≥ ${items.length} m·ª•c, t·ª´ 1 ƒë·∫øn ${items.length}.`
            )
            .setFooter({
                text: "Shinken Japanese Learning Bot | s!review -l ƒë·ªÉ xem danh s√°ch",
            });

        await message.reply({ embeds: [embed] });
        return;
    }

    // Track removed items for the confirmation message
    const removedItems = [];

    // Remove items by index (converting to 0-based index)
    for (const index of validIndices) {
        const itemIndex = index - 1; // Convert to 0-based index
        const item = items[itemIndex];
        removedItems.push({
            japanese: item.japanese,
            reading: item.reading,
            index: index,
        });

        // Remove the item by its Japanese text
        reviewManagerInstance.removeReviewItem(
            userId,
            item.japanese
        );
    }

    // Create success message
    const itemsList = removedItems
        .map((item) => {
            return `${item.index}. **${item.japanese}** (${item.reading})`;
        })
        .join("\n");

    const embed = new EmbedBuilder()
        .setColor("#00cc99" as ColorResolvable)
        .setTitle(`‚úÖ ƒê√£ x√≥a ${removedItems.length} m·ª•c`)
        .setDescription(
            `C√°c m·ª•c sau ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch √¥n t·∫≠p c·ªßa b·∫°n:\n\n${itemsList}`
        )
        .setFooter({
            text: "Shinken Japanese Learning Bot | s!review -l ƒë·ªÉ xem danh s√°ch c√≤n l·∫°i",
        });

    await message.reply({ embeds: [embed] });
}

/**
 * Handle clearing review items
 */
async function handleClearReview(
    message: Message,
    userId: string
): Promise<void> {
    reviewManagerInstance.clearReviewItems(userId);

    const embed = new EmbedBuilder()
        .setColor("#00cc99" as ColorResolvable)
        .setTitle("‚úÖ ƒê√£ x√≥a danh s√°ch √¥n t·∫≠p")
        .setDescription(
            "T·∫•t c·∫£ c√°c m·ª•c trong danh s√°ch √¥n t·∫≠p c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng."
        )
        .setFooter({
            text: "Shinken Japanese Learning Bot",
        });

    await message.reply({ embeds: [embed] });
}

/**
 * Handle listing review items
 */
async function handleListReview(
    message: Message,
    userId: string
): Promise<void> {
    const items =
        reviewManagerInstance.getReviewItems(userId);

    if (!items.length) {
        const embed = new EmbedBuilder()
            .setColor("#ff9900" as ColorResolvable)
            .setTitle("‚ö†Ô∏è Kh√¥ng c√≥ m·ª•c ƒë·ªÉ √¥n t·∫≠p")
            .setDescription(
                "B·∫°n ch∆∞a c√≥ t·ª´ v·ª±ng n√†o trong danh s√°ch √¥n t·∫≠p."
            )
            .setFooter({
                text: "Shinken Japanese Learning Bot",
            });

        await message.reply({ embeds: [embed] });
        return;
    }

    // Format items for display
    const itemsList = items
        .map((item, index) => {
            return `${index + 1}. **${item.japanese}** (${
                item.reading
            }) - ${item.meaning}`;
        })
        .join("\n");

    const embed = new EmbedBuilder()
        .setColor("#0099ff" as ColorResolvable)
        .setTitle(
            `üìã Danh s√°ch √¥n t·∫≠p (${items.length} m·ª•c)`
        )
        .setDescription(
            itemsList.length > 4000
                ? itemsList.substring(0, 4000) +
                      "...\n(C√≤n nhi·ªÅu m·ª•c kh√°c)"
                : itemsList
        )
        .setFooter({
            text: "Shinken Japanese Learning Bot | s!review ƒë·ªÉ √¥n t·∫≠p, s!review -r 1,2,3 ƒë·ªÉ x√≥a m·ª•c",
        });

    await message.reply({ embeds: [embed] });
}

/**
 * Parse review options from command arguments
 */
function parseReviewOptions(args: string[]): {
    mode?: QuizMode;
    studyMode?: StudyMode;
    timeoutSeconds?: number;
    clear?: boolean;
    list?: boolean;
    remove?: number[];
} {
    const options: {
        mode?: QuizMode;
        studyMode?: StudyMode;
        timeoutSeconds?: number;
        clear?: boolean;
        list?: boolean;
        remove?: number[];
    } = {};

    // Check for simple commands first
    if (
        args.includes("clear") ||
        args.includes("--clear") ||
        args.includes("-c")
    ) {
        options.clear = true;
        return options;
    }

    if (
        args.includes("list") ||
        args.includes("--list") ||
        args.includes("-l")
    ) {
        options.list = true;
        return options;
    }

    // Parse arguments
    for (let i = 0; i < args.length; i++) {
        const arg = args[i].toLowerCase();

        // Check for named parameters
        if (arg.startsWith("--") || arg.startsWith("-")) {
            const paramName = arg.startsWith("--")
                ? arg.substring(2)
                : arg.substring(1);

            let value: string;

            // Handle --param=value format
            if (paramName.includes("=")) {
                const [key, val] = paramName.split("=", 2);
                value = val;

                processParam(key, value, options);
            }
            // Handle --param value format
            else if (
                i + 1 < args.length &&
                !args[i + 1].startsWith("-")
            ) {
                value = args[i + 1];
                i++; // Skip next argument as it's the value

                processParam(paramName, value, options);
            }
            // Handle flags without values
            else {
                processParam(paramName, "", options);
            }
        }
    }

    return options;
}

/**
 * Process a parameter and update options
 */
function processParam(
    key: string,
    value: string,
    options: {
        mode?: QuizMode;
        studyMode?: StudyMode;
        timeoutSeconds?: number;
        clear?: boolean;
        list?: boolean;
        remove?: number[];
    }
): void {
    switch (key) {
        case "mode":
        case "m":
            options.mode = parseInt(value, 10) as QuizMode;
            break;
        case "study":
        case "s":
            options.studyMode = value as StudyMode;
            break;
        case "timeout":
        case "t":
            options.timeoutSeconds =
                parseInt(value, 10) || 20;
            break;
        case "clear":
        case "c":
            options.clear = true;
            break;
        case "list":
        case "l":
            options.list = true;
            break;
        case "remove":
        case "r":
            // Parse comma-separated list of indices
            if (value) {
                options.remove = value
                    .split(",")
                    .map((indexStr) =>
                        parseInt(indexStr.trim(), 10)
                    )
                    .filter((index) => !isNaN(index));
            }
            break;
    }
}
